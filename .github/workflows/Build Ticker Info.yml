name: Build Ticker Info

on:
  workflow_dispatch:
  schedule:
    - cron: "15 5 * * *"  # daily at 05:15 UTC

jobs:
  build-parts:
    strategy:
      fail-fast: false
      matrix:
        part_index: [0, 1]   # 2 partitions
        part_total: [2]
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run builder (partition ${{ matrix.part_index }})
        run: |
          python scripts/build_ticker_info.py \
            --part-index ${{ matrix.part_index }} \
            --part-total ${{ matrix.part_total }} \
            --verbose

      - name: Upload partition artifact
        uses: actions/upload-artifact@v4
        with:
          name: ticker-info-part-${{ matrix.part_index }}
          path: |
            data/ticker_info.json
            logs/build_ticker_info.log

  merge:
    needs: build-parts
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Download partition artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge JSON files
        run: |
          mkdir -p data
          python - <<'PYCODE' import json, glob, os merged = {}
          
          def quality(info):
          s = info.get("sector","").lower()
          i = info.get("industry","").lower()
          return int(s not in ("","n/a","unknown") and i not in ("","n/a","unknown"))

          for p in glob.glob("artifacts/**/ticker_info.json", recursive=True):
          with open(p) as f:
          part_data = json.load(f)
          for sym, rec in part_data.items():
          if sym not in merged or quality(rec["info"]) > quality(merged[sym]["info"]):
            merged[sym] = rec

          with open("data/ticker_info.json","w") as f:
          json.dump(merged,f,indent=2,sort_keys=True)
          print("Merged entries:", len(merged)) PYCODE

      - name: Commit & Push (if changed)
        run: |
          if [[ -n "$(git status --porcelain data/ticker_info.json)" ]]; then
            git config user.name "github-actions"
            git config user.email "actions@users.noreply.github.com"
            git add data/ticker_info.json
            git commit -m "Update ticker_info.json (auto)"
            git push
          else
            echo "No changes."
